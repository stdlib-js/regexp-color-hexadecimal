{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar contains = require( '@stdlib/assert-contains' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar MODES = [ 'full', 'shorthand', 'either' ];\n\n\n// MAIN //\n\n/**\n* Returns a regular expression to match a hexadecimal color.\n*\n* @param {string} [mode='full'] - color format (`full`, `shorthand`, or `either`)\n* @throws {Error} mode must be `full`, `shorthand`, or `either`\n* @returns {RegExp} regular expression\n*\n* @example\n* var RE = reColorHexadecimal();\n* // returns <RegExp>\n*\n* var bool = RE.test( 'ffffff' );\n* // returns true\n*\n* bool = RE.test( '000' );\n* // returns false\n*/\nfunction reColorHexadecimal( mode ) {\n\tif ( arguments.length > 0 ) {\n\t\tif ( !contains( MODES, mode ) ) {\n\t\t\tthrow new Error( format( 'invalid argument. Mode must be either `full`, `shorthand`, or `either`. Value: `%s`.', mode ) );\n\t\t}\n\t}\n\tif ( mode === 'shorthand' ) {\n\t\treturn /^[0-9A-F]{3}$/i;\n\t}\n\tif ( mode === 'either' ) {\n\t\treturn /^[0-9A-F]{3}$|^[0-9A-F]{6}$/i;\n\t}\n\t// Case: mode === 'full'\n\treturn /^[0-9A-F]{6}$/i;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reColorHexadecimal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a regular expression to match a hexadecimal color.\n*\n* @module @stdlib/regexp-color-hexadecimal\n*\n* @example\n* var reColorHexadecimal = require( '@stdlib/regexp-color-hexadecimal' );\n* var RE_COLOR_HEXADECIMAL = reColorHexadecimal();\n*\n* var bool = RE_COLOR_HEXADECIMAL.test( '474747' );\n* // returns true\n*\n* bool = RE_COLOR_HEXADECIMAL.test( 'ZZZZZZ' );\n* // returns false\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar reColorHexadecimal = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Match any `3` or `6` letter character sequence only containing numbers or the letters `A-Fa-f`.\n*\n* Regular expression: `/^[0-9A-F]{3}$|^[0-9A-F]{6}$/i`\n*\n* -   `/^`\n*     -   match anything that begins with\n*\n* -   `[0-9A-F]`\n*     -   match anything that contains the numbers `0-9` and/or the letters `A-F`\n*\n* -   `{3}`\n*     -   exactly three matched characters\n*\n* -   `$`\n*     -   end of character sequence\n*\n* -   `|`\n*     -   or\n*\n* -   `^`\n*     -   match anything that begins with\n*\n* -   `[0-9A-F]`\n*     -   match anything that contains the numbers `0-9` and/or the letters `A-F`\n*\n* -   `{6}`\n*     -   exactly six matched characters\n*\n* -   `$`\n*     -   end of character sequence\n*\n* -   `/i`\n*     -   ignore case\n*\n* @constant\n* @type {RegExp}\n* @default /^[0-9A-F]{3}$|^[0-9A-F]{6}$/i\n*/\nvar RE_COLOR_HEXADECIMAL_EITHER = /^[0-9A-F]{3}$|^[0-9A-F]{6}$/i;\n\n// Same as above but only for 3 letter sequences:\nvar RE_COLOR_HEXADECIMAL_SHORTHAND = /^[0-9A-F]{3}$/i;\n\n// Same as above but only for 6 letter sequences:\nvar RE_COLOR_HEXADECIMAL = /^[0-9A-F]{6}$/i;\n\n\n// MAIN //\n\nsetReadOnly( reColorHexadecimal, 'REGEXP', RE_COLOR_HEXADECIMAL );\nsetReadOnly( reColorHexadecimal, 'REGEXP_SHORTHAND', RE_COLOR_HEXADECIMAL_SHORTHAND );\nsetReadOnly( reColorHexadecimal, 'REGEXP_EITHER', RE_COLOR_HEXADECIMAL_EITHER );\n\n\n// EXPORTS //\n\nmodule.exports = reColorHexadecimal;\n"],"names":["contains","require$$0","format","require$$1","MODES","setReadOnly","reColorHexadecimal","mode","arguments","length","Error","RE_COLOR_HEXADECIMAL_EITHER","RE_COLOR_HEXADECIMAL_SHORTHAND","RE_COLOR_HEXADECIMAL","lib"],"mappings":";;qRAsBA,IAAIA,EAAWC,EACXC,EAASC,EAKTC,EAAQ,CAAE,OAAQ,YAAa,UAyCnC,IC/BAC,EAAAJ,EACAK,EDWA,SAA6BC,GAC5B,GAAKC,UAAUC,OAAS,IACjBT,EAAUI,EAAOG,GACtB,MAAM,IAAIG,MAAOR,EAAQ,uFAAwFK,IAGnH,MAAc,cAATA,EACG,iBAEM,WAATA,EACG,+BAGD,kBCoBRI,EAAA,+BAGAC,EAAA,iBAGAC,EAAA,iBAKAR,EAAAC,EAAA,SAAAO,GACAR,EAAAC,EAAA,mBAAAM,GACAP,EAAAC,EAAA,gBAAAK,GAKA,IAAAG,EAAAR"}